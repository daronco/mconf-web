-# locals:
-#   private_message (PrivateMessage)
-#   target_user (User): user that is reading the message
-#   expanded (boolean)

- sender = User.with_disabled.find(private_message.sender_id)

.logo-in-thread
  - if sender.disabled?
    = logo_image(sender, :size => '32', :class => "logo logo-user")
  - else
    = raw(link_logo_image(sender, :size => '32', :title => sender.username, :url => user_path(sender), :class => "logo logo-user"))

.thread-content
  - unless expanded
    %ul.thread-action-links.visible-on-hover{ :"data-hover-tracked" => "parent-#{private_message.id}" }
      %li= link_to t('open').downcase, message_path(private_message)
      - privatetitle = sanitize(private_message.title)
      %li= link_to t('remove').downcase, message_path(private_message, :private_message => {:deleted_by_receiver => true}), :confirm => t('delete.confirm', :element => privatetitle), :method => :delete, :title => t('delete.one')

  .thread-title
    - unless private_message.checked
      = icon_unread_message()
    - if private_message.sender_id.present?
      - if sender.disabled?
        %span.thread-author= sender.name
      - else
        = link_to(sender.name, user_path(sender), :class => "thread-author")
    = t('.wrote')
    - if expanded
      = sanitize(private_message.title)
    - else
      = link_to sanitize(private_message.title), message_path(private_message)
    %span.thread-updated-at
      - if Time.now.to_date == private_message.created_at.to_date
        = time_ago_in_words(private_message.created_at)
      - else
        = private_message.created_at.strftime("%d %b")

  .thread-text
    - if expanded
      = sanitize(auto_link(simple_format(private_message.body)))
    - else
      = sanitize(auto_link(simple_format(first_words(private_message.body, 100))))
